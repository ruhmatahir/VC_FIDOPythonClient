# coding: utf-8

"""
    Simple FIDO API

    This is the FIDO API  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: ruhma@metrarc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PublicKeyCredentialCreationOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rp': 'Rp',
        'user': 'User',
        'challenge': 'Challenge',
        'pub_key_cred_params': 'PubKeyCredParams',
        'timeout': 'Timeout',
        'exclude_credentials': 'ExcludeCredentials',
        'authenticator_selection': 'AuthenticatorSelection',
        'attestation': 'Attestation',
        'extensions': 'Extensions'
    }

    attribute_map = {
        'rp': 'rp',
        'user': 'user',
        'challenge': 'challenge',
        'pub_key_cred_params': 'pubKeyCredParams',
        'timeout': 'timeout',
        'exclude_credentials': 'excludeCredentials',
        'authenticator_selection': 'authenticatorSelection',
        'attestation': 'attestation',
        'extensions': 'extensions'
    }

    def __init__(self, rp=None, user=None, challenge=None, pub_key_cred_params=None, timeout=None, exclude_credentials=None, authenticator_selection=None, attestation=None, extensions=None):  # noqa: E501
        """PublicKeyCredentialCreationOptions - a model defined in Swagger"""  # noqa: E501
        self._rp = None
        self._user = None
        self._challenge = None
        self._pub_key_cred_params = None
        self._timeout = None
        self._exclude_credentials = None
        self._authenticator_selection = None
        self._attestation = None
        self._extensions = None
        self.discriminator = None
        self.rp = rp
        self.user = user
        self.challenge = challenge
        if pub_key_cred_params is not None:
            self.pub_key_cred_params = pub_key_cred_params
        if timeout is not None:
            self.timeout = timeout
        if exclude_credentials is not None:
            self.exclude_credentials = exclude_credentials
        if authenticator_selection is not None:
            self.authenticator_selection = authenticator_selection
        if attestation is not None:
            self.attestation = attestation
        if extensions is not None:
            self.extensions = extensions

    @property
    def rp(self):
        """Gets the rp of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The rp of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: Rp
        """
        return self._rp

    @rp.setter
    def rp(self, rp):
        """Sets the rp of this PublicKeyCredentialCreationOptions.


        :param rp: The rp of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: Rp
        """
        if rp is None:
            raise ValueError("Invalid value for `rp`, must not be `None`")  # noqa: E501

        self._rp = rp

    @property
    def user(self):
        """Gets the user of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The user of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PublicKeyCredentialCreationOptions.


        :param user: The user of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def challenge(self):
        """Gets the challenge of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The challenge of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: Challenge
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this PublicKeyCredentialCreationOptions.


        :param challenge: The challenge of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: Challenge
        """
        if challenge is None:
            raise ValueError("Invalid value for `challenge`, must not be `None`")  # noqa: E501

        self._challenge = challenge

    @property
    def pub_key_cred_params(self):
        """Gets the pub_key_cred_params of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The pub_key_cred_params of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: PubKeyCredParams
        """
        return self._pub_key_cred_params

    @pub_key_cred_params.setter
    def pub_key_cred_params(self, pub_key_cred_params):
        """Sets the pub_key_cred_params of this PublicKeyCredentialCreationOptions.


        :param pub_key_cred_params: The pub_key_cred_params of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: PubKeyCredParams
        """

        self._pub_key_cred_params = pub_key_cred_params

    @property
    def timeout(self):
        """Gets the timeout of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The timeout of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: Timeout
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this PublicKeyCredentialCreationOptions.


        :param timeout: The timeout of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: Timeout
        """

        self._timeout = timeout

    @property
    def exclude_credentials(self):
        """Gets the exclude_credentials of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The exclude_credentials of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: ExcludeCredentials
        """
        return self._exclude_credentials

    @exclude_credentials.setter
    def exclude_credentials(self, exclude_credentials):
        """Sets the exclude_credentials of this PublicKeyCredentialCreationOptions.


        :param exclude_credentials: The exclude_credentials of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: ExcludeCredentials
        """

        self._exclude_credentials = exclude_credentials

    @property
    def authenticator_selection(self):
        """Gets the authenticator_selection of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The authenticator_selection of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: AuthenticatorSelection
        """
        return self._authenticator_selection

    @authenticator_selection.setter
    def authenticator_selection(self, authenticator_selection):
        """Sets the authenticator_selection of this PublicKeyCredentialCreationOptions.


        :param authenticator_selection: The authenticator_selection of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: AuthenticatorSelection
        """

        self._authenticator_selection = authenticator_selection

    @property
    def attestation(self):
        """Gets the attestation of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The attestation of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: Attestation
        """
        return self._attestation

    @attestation.setter
    def attestation(self, attestation):
        """Sets the attestation of this PublicKeyCredentialCreationOptions.


        :param attestation: The attestation of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: Attestation
        """

        self._attestation = attestation

    @property
    def extensions(self):
        """Gets the extensions of this PublicKeyCredentialCreationOptions.  # noqa: E501


        :return: The extensions of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :rtype: Extensions
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this PublicKeyCredentialCreationOptions.


        :param extensions: The extensions of this PublicKeyCredentialCreationOptions.  # noqa: E501
        :type: Extensions
        """

        self._extensions = extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicKeyCredentialCreationOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicKeyCredentialCreationOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
