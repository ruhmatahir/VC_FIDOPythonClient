# coding: utf-8

"""
    Simple FIDO API

    This is the FIDO API  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: ruhma@metrarc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuthenticatorAssertionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'CredentialId',
        'raw_id': 'CredentialId',
        'type': 'str',
        'response': 'AuthenticatorAssertionResponseResponse'
    }

    attribute_map = {
        'id': 'id',
        'raw_id': 'rawId',
        'type': 'type',
        'response': 'response'
    }

    def __init__(self, id=None, raw_id=None, type=None, response=None):  # noqa: E501
        """AuthenticatorAssertionResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._raw_id = None
        self._type = None
        self._response = None
        self.discriminator = None
        self.id = id
        if raw_id is not None:
            self.raw_id = raw_id
        self.type = type
        self.response = response

    @property
    def id(self):
        """Gets the id of this AuthenticatorAssertionResponse.  # noqa: E501


        :return: The id of this AuthenticatorAssertionResponse.  # noqa: E501
        :rtype: CredentialId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticatorAssertionResponse.


        :param id: The id of this AuthenticatorAssertionResponse.  # noqa: E501
        :type: CredentialId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def raw_id(self):
        """Gets the raw_id of this AuthenticatorAssertionResponse.  # noqa: E501


        :return: The raw_id of this AuthenticatorAssertionResponse.  # noqa: E501
        :rtype: CredentialId
        """
        return self._raw_id

    @raw_id.setter
    def raw_id(self, raw_id):
        """Sets the raw_id of this AuthenticatorAssertionResponse.


        :param raw_id: The raw_id of this AuthenticatorAssertionResponse.  # noqa: E501
        :type: CredentialId
        """

        self._raw_id = raw_id

    @property
    def type(self):
        """Gets the type of this AuthenticatorAssertionResponse.  # noqa: E501


        :return: The type of this AuthenticatorAssertionResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthenticatorAssertionResponse.


        :param type: The type of this AuthenticatorAssertionResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def response(self):
        """Gets the response of this AuthenticatorAssertionResponse.  # noqa: E501


        :return: The response of this AuthenticatorAssertionResponse.  # noqa: E501
        :rtype: AuthenticatorAssertionResponseResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this AuthenticatorAssertionResponse.


        :param response: The response of this AuthenticatorAssertionResponse.  # noqa: E501
        :type: AuthenticatorAssertionResponseResponse
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticatorAssertionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticatorAssertionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
